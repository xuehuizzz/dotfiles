worker_processes auto;                  # 根据 CPU 自动分配
worker_rlimit_nofile 65535;             # 打开文件句柄限制

events {
    worker_connections 4096;            # 每个 worker 允许的最大连接数
    use epoll;                          # 高性能 I/O 模型
    multi_accept on;                    # 一次尽可能多地接受新连接
}

http {
    # =========================
    # 基础性能优化
    # =========================
    sendfile on;                        # zero-copy
    tcp_nopush on;                      # 合并小包
    tcp_nodelay on;                     # 低延迟
    keepalive_timeout 65;               # keep-alive
    client_header_timeout 10s;
    client_body_timeout 10s;
    send_timeout 10s;

    # =========================
    # 缓冲区设置
    # =========================
    client_max_body_size 20m;
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 16k;

    # =========================
    # Gzip 压缩
    # =========================
    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 5;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;

    # =========================
    # 日志
    # =========================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # =========================
    # Proxy 缓存
    # =========================
    proxy_buffers 8 16k;
    proxy_buffer_size 4k;

    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=1h use_temp_path=off;

    # 如果后端超时或错误时使用过期缓存
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    # =========================
    # upstream 配置
    # =========================
    upstream backend_pool {
        server backend1.local max_fails=3 fail_timeout=30s;
        server backend2.local max_fails=3 fail_timeout=30s;
        # server backend1.local weight=3;  # 按权重示例
    }

    # =========================
    # HTTP → HTTPS 重定向
    # =========================
    server {
        listen 80;
        server_name yourdomain.com;

        location / {
            add_header Cache-Control "no-store";  # 防止中间缓存
            return 301 https://$host$request_uri;
        }
    }

    # =========================
    # HTTPS 443
    # =========================
    server {
        listen 443 ssl;
        server_name yourdomain.com;

        # SSL 配置
        ssl_certificate /path/to/cert.pem;
        ssl_certificate_key /path/to/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1h;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 反向代理
        location / {
            proxy_pass http://backend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 缓存
            proxy_cache my_cache;
            proxy_cache_valid 200 1h;

            # 可选：针对 POST 不缓存
            proxy_cache_methods GET HEAD;
        }
    }
}
